{"version":3,"file":"static/js/235.75ba26f6.chunk.js","mappings":"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","sources":["pages/SignUpPage.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport React from 'react';\nimport { fetchUserRegister } from '../redux/user/operations';\nimport { Formik, ErrorMessage } from 'formik';\nimport pulseIcon from '../img/pulse-icons.svg';\nimport * as Yup from 'yup';\nimport { useState } from 'react';\n\nimport {\n  StyledForm,\n  Input,\n  Button,\n  ErrorText,\n  Contsform,\n  MessageInput,\n  SvgIcon,\n  SuccessText,\n  SuccessSvg,\n  Icons,\n} from '../components/FormStyle/StyledForm.styled';\n\nimport AuthLayout from '../components/AuthLayout/AuthLayout';\n\nfunction SignInPage() {\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const SignUp = Yup.object().shape({\n    name: Yup.string().min(2).max(20).required('Required'),\n    email: Yup.string()\n      .min(6, 'The email address must be at least 6 characters long!')\n      .max(35, 'The email address is too long!')\n      .email('Error email')\n      .required('Required'),\n    password: Yup.string()\n      .min(6, 'The password address must be at least 6 characters long!')\n      .max(20, 'The password length is too long!')\n      .required('Required'),\n  });\n\n  return (\n    <AuthLayout\n      title=\"Sign up\"\n      paragraph=\"Thank you for your interest in our platform. To complete the registration process, please provide us with the following information.\"\n      bottomText=\"Already have an account?\"\n      linkName=\"Sign In\"\n      linkUrl=\"/login\"\n    >\n      <Formik\n        initialValues={{\n          email: '',\n          name: '',\n          password: '',\n        }}\n        validationSchema={SignUp}\n        onSubmit={values => {\n          dispatch(fetchUserRegister(values));\n        }}\n      >\n        {({ errors, touched }) => (\n          <StyledForm>\n            <Contsform>\n              <label htmlFor=\"name\">\n                <Input\n                  id=\"name\"\n                  name=\"name\"\n                  placeholder=\"Name\"\n                  type=\"text\"\n                  autoComplete=\"off\"\n                  className={`\n                    ${errors.name && touched.name ? 'error' : ''}\n                    ${touched.name && !errors.name ? 'success' : ''}`}\n                />\n                {errors.name && touched.name && (\n                  <MessageInput>\n                    <SvgIcon>\n                      <use href={`${pulseIcon}#checkbox`} />\n                    </SvgIcon>\n                    <ErrorMessage component={ErrorText} name=\"name\" />\n                  </MessageInput>\n                )}\n                {!errors.name && touched.name && (\n                  <MessageInput>\n                    <SuccessSvg>\n                      <use href={`${pulseIcon}#checkbox`} />\n                    </SuccessSvg>\n                    <SuccessText>Success name</SuccessText>\n                  </MessageInput>\n                )}\n              </label>\n              <label htmlFor=\"email\">\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  type=\"email\"\n                  autoComplete=\"off\"\n                  className={`\n                    ${errors.email && touched.email ? 'error' : ''}\n                    ${touched.email && !errors.email ? 'success' : ''}`}\n                />\n\n                {errors.email && touched.email && (\n                  <MessageInput>\n                    <SvgIcon>\n                      <use href={pulseIcon + '#checkbox'}></use>\n                    </SvgIcon>\n                    <ErrorMessage component={ErrorText} name=\"email\" />\n                  </MessageInput>\n                )}\n                {!errors.email && touched.email && (\n                  <MessageInput>\n                    <SuccessSvg>\n                      <use href={`${pulseIcon}#checkbox`} />\n                    </SuccessSvg>\n                    <SuccessText>Success email</SuccessText>\n                  </MessageInput>\n                )}\n              </label>\n              <label htmlFor=\"password\">\n                <Input\n                  type={showPassword ? 'text' : 'password'}\n                  id=\"password\"\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  className={`${\n                    errors.password && touched.password ? 'error' : ''\n                  }\n                                    ${\n                                      touched.password && !errors.password\n                                        ? 'success'\n                                        : ''\n                                    }`}\n                />\n                {errors.password && touched.password && (\n                  <MessageInput>\n                    <SvgIcon>\n                      <use href={`${pulseIcon}#checkbox`} />\n                    </SvgIcon>\n                    <ErrorMessage component={ErrorText} name=\"password\" />\n                  </MessageInput>\n                )}\n                {!errors.password && touched.password && (\n                  <MessageInput>\n                    <SuccessSvg>\n                      <use href={`${pulseIcon}#checkbox`} />\n                    </SuccessSvg>\n                    <SuccessText>Success password</SuccessText>\n                  </MessageInput>\n                )}\n                {!showPassword && (\n                  <Icons\n                    onClick={() => setShowPassword(!showPassword)}\n                    style={{\n                      left:\n                        window.innerWidth >= 1440\n                          ? '424px'\n                          : window.innerWidth >= 768\n                          ? '360px'\n                          : '320px',\n                      bottom:\n                        window.innerWidth >= 1440\n                          ? '163px'\n                          : window.innerWidth >= 768\n                          ? '163px'\n                          : '112px',\n                    }}\n                  >\n                    <use href={pulseIcon + '#icon-eye'}></use>\n                  </Icons>\n                )}\n                {showPassword && (\n                  <Icons\n                    onClick={() => setShowPassword(!showPassword)}\n                    style={{\n                      left:\n                        window.innerWidth >= 1440\n                          ? '424px'\n                          : window.innerWidth >= 768\n                          ? '360px'\n                          : '320px',\n                      bottom:\n                        window.innerWidth >= 1440\n                          ? '163px'\n                          : window.innerWidth >= 768\n                          ? '163px'\n                          : '112px',\n                    }}\n                  >\n                    <use href={pulseIcon + '#icon-eye-off'}></use>\n                  </Icons>\n                )}\n              </label>\n            </Contsform>\n            <Button type=\"submit\">Sign Up</Button>\n          </StyledForm>\n        )}\n      </Formik>\n    </AuthLayout>\n  );\n}\n\nexport default SignInPage;\n"],"names":["dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","SignUp","Yup","shape","name","min","max","required","email","password","_jsx","AuthLayout","title","paragraph","bottomText","linkName","linkUrl","children","Formik","initialValues","validationSchema","onSubmit","values","fetchUserRegister","_ref","errors","touched","_jsxs","StyledForm","Contsform","htmlFor","Input","id","placeholder","type","autoComplete","className","concat","MessageInput","SvgIcon","href","pulseIcon","ErrorMessage","component","ErrorText","SuccessSvg","SuccessText","Icons","onClick","style","left","window","innerWidth","bottom","Button"],"sourceRoot":""}