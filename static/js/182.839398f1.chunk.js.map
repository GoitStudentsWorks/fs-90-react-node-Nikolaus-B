{"version":3,"file":"static/js/182.839398f1.chunk.js","mappings":"qPAqKA,UAhJA,WACE,IAAMA,GAAWC,EAAAA,EAAAA,MACjBC,GAAwCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAE9BI,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KACJG,IAAI,EAAG,yDACPC,IAAI,GAAI,kCACRF,MAAM,eACNG,SAAS,YACZC,SAAUN,EAAAA,KAAaK,SAAS,YAAYF,IAAI,GAAGC,IAAI,MAGzD,OACEG,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTC,MAAM,UACNC,UAAU,mEACVC,WAAW,8BACXC,SAAS,UACTC,QAAQ,YAAWC,UAEnBP,EAAAA,EAAAA,KAACQ,EAAAA,GAAM,CACLC,cAAe,CACbd,MAAO,GACPI,SAAU,IAEZW,iBAAkBlB,EAClBmB,SAAU,SAAAC,GACR5B,GAAS6B,EAAAA,EAAAA,IAAeD,GAC1B,EAAEL,SAED,SAAAO,GAAA,IAAGC,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QAAO,OACjBC,EAAAA,EAAAA,MAACC,EAAAA,GAAY,CAAAX,SAAA,EACXU,EAAAA,EAAAA,MAAA,SAAOE,QAAQ,QAAOZ,SAAA,EACpBP,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CACJC,GAAG,QACHC,KAAK,QACLC,YAAY,QACZC,KAAK,QACLC,UAAS,yBAAAC,OACHX,EAAOpB,OAASqB,EAAQrB,MAAQ,QAAU,GAAE,0BAAA+B,OAC5CV,EAAQrB,QAAUoB,EAAOpB,MAAQ,UAAY,MAGpDoB,EAAOpB,OAASqB,EAAQrB,QACvBsB,EAAAA,EAAAA,MAACU,EAAAA,GAAY,CAAApB,SAAA,EACXP,EAAAA,EAAAA,KAAC4B,EAAAA,GAAO,CAAArB,UACNP,EAAAA,EAAAA,KAAA,OAAK6B,KAAMC,EAAAA,EAAY,iBAEzB9B,EAAAA,EAAAA,KAAC+B,EAAAA,GAAY,CAACC,UAAWC,EAAAA,EAAWX,KAAK,cAG3CP,EAAOpB,OAASqB,EAAQrB,QACxBsB,EAAAA,EAAAA,MAACU,EAAAA,GAAY,CAAApB,SAAA,EACXP,EAAAA,EAAAA,KAACkC,EAAAA,GAAU,CAAA3B,UACTP,EAAAA,EAAAA,KAAA,OAAK6B,KAAI,GAAAH,OAAKI,EAAAA,EAAS,kBAEzB9B,EAAAA,EAAAA,KAACmC,EAAAA,GAAW,CAAA5B,SAAC,yBAInBU,EAAAA,EAAAA,MAAA,SAAOE,QAAQ,WAAUZ,SAAA,EACvBP,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CACJC,GAAG,WACHC,KAAK,WACLC,YAAY,WACZC,KAAMlC,EAAe,OAAS,WAC9BmC,UAAS,GAAAC,OACPX,EAAOhB,UAAYiB,EAAQjB,SAAW,QAAU,GAAE,0CAAA2B,OAG9BV,EAAQjB,WAAagB,EAAOhB,SACxB,UACA,MAG3BgB,EAAOhB,UAAYiB,EAAQjB,WAC1BkB,EAAAA,EAAAA,MAACU,EAAAA,GAAY,CAAApB,SAAA,EACXP,EAAAA,EAAAA,KAAC4B,EAAAA,GAAO,CAAArB,UACNP,EAAAA,EAAAA,KAAA,OAAK6B,KAAI,GAAAH,OAAKI,EAAAA,EAAS,kBAEzB9B,EAAAA,EAAAA,KAAC+B,EAAAA,GAAY,CAACC,UAAWC,EAAAA,EAAWX,KAAK,iBAG3CP,EAAOhB,UAAYiB,EAAQjB,WAC3BkB,EAAAA,EAAAA,MAACU,EAAAA,GAAY,CAAApB,SAAA,EACXP,EAAAA,EAAAA,KAACkC,EAAAA,GAAU,CAAA3B,UACTP,EAAAA,EAAAA,KAAA,OAAK6B,KAAI,GAAAH,OAAKI,EAAAA,EAAS,kBAEzB9B,EAAAA,EAAAA,KAACmC,EAAAA,GAAW,CAAA5B,SAAC,yBAGfjB,IACAU,EAAAA,EAAAA,KAACoC,EAAAA,GAAO,CACNC,QAAS,kBAAM9C,GAAiBD,EAAa,EAC7CgD,MAAO,CACLC,KACEC,OAAOC,YAAc,KACjB,QACAD,OAAOC,YAAc,IACrB,QACA,QACNC,IACEF,OAAOC,YAAc,KACjB,QACAD,OAAOC,YAAc,IACrB,QACA,SACNlC,UAEFP,EAAAA,EAAAA,KAAA,OAAK6B,KAAMC,EAAAA,EAAY,gBAG1BxC,IACCU,EAAAA,EAAAA,KAACoC,EAAAA,GAAO,CACNC,QAAS,kBAAM9C,GAAiBD,EAAa,EAC7CgD,MAAO,CACLC,KACEC,OAAOC,YAAc,KACjB,QACAD,OAAOC,YAAc,IACrB,QACA,QACNC,IACEF,OAAOC,YAAc,KACjB,QACAD,OAAOC,YAAc,IACrB,QACA,SACNlC,UAEFP,EAAAA,EAAAA,KAAA,OAAK6B,KAAMC,EAAAA,EAAY,wBAK7B9B,EAAAA,EAAAA,KAAC2C,EAAAA,GAAM,CAACnB,KAAK,SAAQjB,SAAC,cACT,KAKzB,C","sources":["pages/SignInPage.jsx"],"sourcesContent":["import React from 'react';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { fetchUserLogIn } from '../redux/user/operations';\nimport pulseIcon from '../img/pulse-icons.svg';\nimport {\n  StyledFormIn,\n  Input,\n  Button,\n  MessageInput,\n  ErrorText,\n  SvgIcon,\n  SuccessText,\n  SuccessSvg,\n  IconsIn,\n} from '../components/FormStyle/StyledForm.styled';\n\nimport AuthLayout from 'components/AuthLayout/AuthLayout';\n\nfunction SignInPage() {\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const SignIn = Yup.object().shape({\n    email: Yup.string()\n      .min(3, 'The email address must be at least 3 characters long!')\n      .max(35, 'The email address is too long!')\n      .email('Error email')\n      .required('Required'),\n    password: Yup.string().required('Required').min(6).max(20),\n  });\n\n  return (\n    <AuthLayout\n      title=\"Sign in\"\n      paragraph=\"Welcome! Please enter your credentials to login to the platform:\"\n      bottomText=\"Donâ€™t have an account?\"\n      linkName=\"Sign up\"\n      linkUrl=\"/register\"\n    >\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n        }}\n        validationSchema={SignIn}\n        onSubmit={values => {\n          dispatch(fetchUserLogIn(values));\n        }}\n      >\n        {({ errors, touched }) => (\n          <StyledFormIn>\n            <label htmlFor=\"email\">\n              <Input\n                id=\"email\"\n                name=\"email\"\n                placeholder=\"Email\"\n                type=\"email\"\n                className={`\n                    ${errors.email && touched.email ? 'error' : ''}\n                    ${touched.email && !errors.email ? 'success' : ''}`}\n              />\n\n              {errors.email && touched.email && (\n                <MessageInput>\n                  <SvgIcon>\n                    <use href={pulseIcon + '#checkbox'}></use>\n                  </SvgIcon>\n                  <ErrorMessage component={ErrorText} name=\"email\" />\n                </MessageInput>\n              )}\n              {!errors.email && touched.email && (\n                <MessageInput>\n                  <SuccessSvg>\n                    <use href={`${pulseIcon}#checkbox`} />\n                  </SuccessSvg>\n                  <SuccessText>Success email</SuccessText>\n                </MessageInput>\n              )}\n            </label>\n            <label htmlFor=\"password\">\n              <Input\n                id=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n                type={showPassword ? 'text' : 'password'}\n                className={`${\n                  errors.password && touched.password ? 'error' : ''\n                }\n                                    ${\n                                      touched.password && !errors.password\n                                        ? 'success'\n                                        : ''\n                                    }`}\n              />\n              {errors.password && touched.password && (\n                <MessageInput>\n                  <SvgIcon>\n                    <use href={`${pulseIcon}#checkbox`} />\n                  </SvgIcon>\n                  <ErrorMessage component={ErrorText} name=\"password\" />\n                </MessageInput>\n              )}\n              {!errors.password && touched.password && (\n                <MessageInput>\n                  <SuccessSvg>\n                    <use href={`${pulseIcon}#checkbox`} />\n                  </SuccessSvg>\n                  <SuccessText>Success password</SuccessText>\n                </MessageInput>\n              )}\n              {!showPassword && (\n                <IconsIn\n                  onClick={() => setShowPassword(!showPassword)}\n                  style={{\n                    left:\n                      window.innerWidth >= 1440\n                        ? '424px'\n                        : window.innerWidth >= 768\n                        ? '357px'\n                        : '320px',\n                    top:\n                      window.innerWidth >= 1440\n                        ? '310px'\n                        : window.innerWidth >= 768\n                        ? '299px'\n                        : '249px',\n                  }}\n                >\n                  <use href={pulseIcon + '#icon-eye'}></use>\n                </IconsIn>\n              )}\n              {showPassword && (\n                <IconsIn\n                  onClick={() => setShowPassword(!showPassword)}\n                  style={{\n                    left:\n                      window.innerWidth >= 1440\n                        ? '424px'\n                        : window.innerWidth >= 768\n                        ? '360px'\n                        : '320px',\n                    top:\n                      window.innerWidth >= 1440\n                        ? '342px'\n                        : window.innerWidth >= 768\n                        ? '332px'\n                        : '275px',\n                  }}\n                >\n                  <use href={pulseIcon + '#icon-eye-off'}></use>\n                </IconsIn>\n              )}\n            </label>\n\n            <Button type=\"submit\">Sign In</Button>\n          </StyledFormIn>\n        )}\n      </Formik>\n    </AuthLayout>\n  );\n}\n\nexport default SignInPage;\n"],"names":["dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","SignIn","Yup","shape","email","min","max","required","password","_jsx","AuthLayout","title","paragraph","bottomText","linkName","linkUrl","children","Formik","initialValues","validationSchema","onSubmit","values","fetchUserLogIn","_ref","errors","touched","_jsxs","StyledFormIn","htmlFor","Input","id","name","placeholder","type","className","concat","MessageInput","SvgIcon","href","pulseIcon","ErrorMessage","component","ErrorText","SuccessSvg","SuccessText","IconsIn","onClick","style","left","window","innerWidth","top","Button"],"sourceRoot":""}